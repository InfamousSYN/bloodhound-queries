{"queries":[
  {
    "name": "[WIP] Users with Most Local Admin Rights",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Computers with Most Sessions [Required: sessions]",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Users with Most Sessions [Required: sessions]",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "List non-privileged user(s) with dangerous permissions to any node type",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) RETURN u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous permissions to any node type",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) WITH u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10 MATCH p=allshortestpaths((u)-[r]->(a)) WHERE NOT u = a RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Users with most cross-domain sessions [Required: sessions]",
    "category": "Top 10",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true, domain: $result})<-[r:HasSession]-(c:Computer) WHERE NOT u.domain = c.domain WITH u, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(c:Computer)-[r:HasSession]->(u) WHERE NOT u.domain = c.domain RETURN p ORDER BY c.name",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List high value target(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (a {highvalue: true, domain: $result}) RETURN a",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List domain(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (d:Domain) RETURN d",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List domain trust(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": true,
        "query": "MATCH p=(n:Domain)-->(m:Domain) RETURN p"
      }
    ]
  },
  {
    "name": "List enabled user(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) RETURN u"
      }
    ]
  },
  {
    "name": "List enabled user(s) with an email address",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE exists(u.email) RETURN u"
      }
    ]
  },
  {
    "name": "List non-managed service account(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {hasspn:true, domain: $result}) WHERE NOT u.name CONTAINS '$' AND NOT u.name CONTAINS 'KRBTGT' RETURN u"
      }
    ]
  },
  {
    "name": "List enabled principal(s) with \"Unconstrained Delegation\"",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (a {unconstraineddelegation: true, enabled: true, domain: $result}) RETURN a",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List domain controller(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (c:Computer {domain: $result})-[:MemberOf]->(g:Group) WHERE g.samaccountname CONTAINS 'Domain Controllers' RETURN c",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List Certificate Authority server(s) [Required: Certipy]",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {type:'Enrollment Service', domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "[WIP] List privileges for Certificate Authority server(s) [Required: Certipy]",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": false,
        "title": "Select a Certificate Authority...",
        "query": "MATCH (n:GPO {type:'Enrollment Service', domain: $result}) RETURN n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List all Certificate Template(s) [Required: Certipy]",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {type:'Certificate Template', domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "Find enabled Certificate Template(s) [Required: Certipy]",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {enabled:true, type:'Certificate Template', domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "[WIP] List all Enrollment Right(s) for Certificate Template(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": false,
        "title": "Select a Certificate Template...",
        "query": "MATCH (n:GPO {type:'Certificate Template', domain: $result}) RETURN n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result, type:'Certificate Template'}) return p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List computer(s) WITHOUT LAPS",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (c:Computer {haslaps:false, domain: $result}) RETURN c ORDER BY c.name",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List network share(s), ignoring SYSVOL",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (a {domain: $result}) WHERE (any(prop in keys(a) where a[prop] contains '\\\\' and not a[prop] contains 'SYSVOL')) RETURN a"
      }
    ]
  },
  {
    "name": "List all group(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "Match (g:Group {domain: $result}) RETURN g"
      }
    ]
  },
  {
    "name": "List all GPO(s)",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "Match (g:GPO {domain: $result}) RETURN g"
      }
    ]
  },
  {
    "name": "List all principal(s) with \"Local Admin\" permission",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List all principal(s) with \"RDP\" permission",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List all principal(s) with \"SQLAdmin\" permission",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List all user session(s) [Required: sessions]",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {domain: $result})<-[r:HasSession]-(c:Computer) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List all user(s) with description field",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {domain: $result}) WHERE u.description IS NOT null return u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) with \"userpassword\" attribute",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.userpassword IS NOT null RETURN u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) with \"password never expires\" attribute",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {pwdneverexpires:true, enabled:true, domain: $result}) return u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) with \"password never expires\" attribute and not changed in last year",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdneverexpires=TRUE AND u.pwdlastset < (datetime().epochseconds - (365 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] return u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) with \"don't require passwords\" attribute",
    "category": "Domain / Macro",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {passwordnotreqd:true, enabled:true, domain: $result}) return u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) but never logged in",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogontimestamp=-1.0 RETURN u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) that logged in within the last 90 days",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
      }
    ]
  },
  {
    "name": "List all enabled user(s) that set password within the last 90 days",
    "category": "Domain / Macro",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
      }
    ]
  },
  {
    "name": "List all owned user(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {owned:true, domain: $result}) RETURN u"
      }
    ]
  },
  {
    "name": "List all owned & enabled user(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) RETURN u"
      }
    ]
  },
  {
    "name": "List all owned & enabled user(s) with an email address",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) WHERE exists(u.email) RETURN u"
      }
    ]
  },
  {
    "name": "List all owned & enabled user(s) with \"Local Admin\" permission, and any active sessions and their group membership(s)",
    "category": "Owned",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List all owned & enabled user(s) with \"RDP\" permission, and any active sessions and their group membership(s)",
    "category": "Owned",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List all owned & enabled user(s) with \"SQLAdmin\" permission",
    "category": "Owned",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List all owned computer(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (c:Computer {owned:true, domain: $result}) RETURN c ORDER BY c.name"
      }
    ]
  },
  {
    "name": "Route all owned & enabled group membership(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route all owned & enabled non-privileged group(s) membership",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:false}) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route all owned & enabled privileged group(s) membership",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:true}) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route all owned & enabled user(s) with Dangerous Rights to any node type",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a)) WHERE NOT a = u RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Route all owned & enabled user(s) with Dangerous Rights to group(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(:Group))RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Route all owned & enabled user(s) with Dangerous Rights to user(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(u:User)) WHERE NOT o = u RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Route from owned & enabled user(s) to all principals with \"Unconstrained Delegation\"",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[*]->(a {unconstraineddelegation: true, enabled: true})) WHERE NOT o = a RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route from owned & enabled principals to high value target(s)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allShortestPaths((o {owned:true, enabled:true, domain: $result})-[*]->(a {highvalue: true})) WHERE NOT o=a RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Owned: [WIP] Find all owned user with privileged access to Azure Tenancy (Required: azurehound)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p"
      }
    ]
  },
  {
    "name": "Owned: [WIP] Find all owned user where group membership grants privileged access to Azure Tenancy (Required: azurehound)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p"
      }
    ]
  },
  {
    "name": "Owned: [WIP] Find all Owners of Azure Applications with Owners to Service Principals with Dangerous Rights (Required: azurehound)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p = (n {enabled:true, owned:true, domain: $result})-[:AZOwns]->(azapp:AZApp)-[r1]->(azsp:AZServicePrincipal)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "Find all owned groups that grant access to network shares",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, domain: $result})-[:MemberOf*1..]->(g:Group) where (any(prop in keys(g) where g[prop] contains '\\\\')) return p"
      }
    ]
  },
  {
    "name": "Route all sessions to computers WITHOUT LAPS (Required: sessions)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer {haslaps:false}) RETURN p ORDER BY c.name"
      }
    ]
  },
  {
    "name": "Route all sessions to computers (Required: sessions)",
    "category": "Owned",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer) RETURN p ORDER BY c.name"
      }
    ]
  },
  {
    "name": "List enabled non-privileged user(s) with \"Local Admin\" permission",
    "category": "Non-privileged",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List enabled non-privileged user(s) with \"Local Admin\" permission, and any active sessions and their group membership(s)",
    "category": "Non-privileged",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List enabled non-privileged user(s) with \"RDP\" permission",
    "category": "Non-privileged",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List enabled non-privileged user(s) with \"RDP\" permission, and any active sessions and their group membership(s)",
    "category": "Non-privileged",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List enabled non-privileged user(s) with \"SQLAdmin\" permission",
    "category": "Non-privileged",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p"
      }
    ]
  },
  {
    "name": "List all \"Domain Users\" group membership(s)",
    "category": "Non-privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g1:Group {domain: $result})-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
      }
    ]
  },
  {
    "name": "List all \"Authenticated Users\" group membership(s)",
    "category": "Non-privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g1:Group {domain: $result})-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
      }
    ]
  },
  {
    "name": "Find all enabled AS-REP roastable user(s)",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {dontreqpreauth: true, enabled:true, domain: $result}) WHERE NOT u.name CONTAINS '$' and NOT u.name CONTAINS 'KRBTGT' RETURN u",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Find all enabled kerberoastable user(s)",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {hasspn: true, enabled:true, domain: $result}) WHERE NOT u.name CONTAINS '$' and NOT u.name CONTAINS 'KRBTGT' RETURN u",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous rights to user(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:User)) WHERE NOT u = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous rights to group(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Group)) WHERE NOT u = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous rights to computer(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Computer)) WHERE NOT u = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous rights to GPO(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:GPO)) WHERE NOT u = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged user(s) with dangerous rights to privileged node(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a {admincount: true})) WHERE NOT u = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged computer(s) with dangerous rights to user(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:User {domain: $result})) WHERE NOT c = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged computer(s) with dangerous rights to group(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Group {domain: $result})) WHERE NOT c = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged computer(s) with dangerous rights to computer(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Computer {domain: $result})) WHERE NOT c = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged computer(s) with dangerous rights to GPO(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:GPO {domain: $result})) WHERE NOT c = a RETURN p"
      }
    ]
  },
  {
    "name": "Route non-privileged computer(s) with dangerous rights to privileged node(s) [HIGH RAM]",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a {admincount: true, domain: $result})) WHERE NOT c = a RETURN p"
      }
    ]
  },
  {
    "name": "List ESC1 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', `Enrollee Supplies Subject`:true, `Client Authentication`:true, domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "List ESC2 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', domain: $result}) WHERE (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) RETURN n"
      }
    ]
  },
  {
    "name": "List ESC3 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', domain: $result}) WHERE (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN n"
      }
    ]
  },
  {
    "name": "List ESC4 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO {Enabled:true, type:'Certificate Template', domain: $result})) WHERE g<>n RETURN p"
      }
    ]
  },
  {
    "name": "List ESC6 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {type:'Enrollment Service', `User Specified SAN`:'Enabled', domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "List ESC7 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO {type:'Enrollment Service', domain: $result})) WHERE  g<>n RETURN p"
      }
    ]
  },
  {
    "name": "List ESC8 vulnerable Certificate Template(s) [Required: Certipy]",
    "category": "Privilege Escalation / Lateral Movement",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (n:GPO {type:'Enrollment Service', `Web Enrollment`:'Enabled', domain: $result}) RETURN n"
      }
    ]
  },
  {
    "name": "List all cross-domain user session(s) and user group membership(s)",
    "category": "Privilege Escalation / Lateral Movement",
    "requireNodeSelect": true,
    "queryList": [
      {
        "final": false,
        "title": "Select source domain...",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true, domain: $result})<-[:HasSession]-(c:Computer) WHERE NOT u.domain = c.domain RETURN p ORDER BY c.name",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List privileged user(s) without \"Protected Users\" group membership",
    "category": "Privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (u:User {admincount:true, domain: $result}), (c:Computer), (u)-[:MemberOf*1..]->(g) WHERE g.name CONTAINS 'Protected Users' WITH COLLECT(u) AS privilegedUsers MATCH (u2:User {admincount:true}) WHERE NOT u2 IN privilegedUsers RETURN u2"
      }
    ]
  },
  {
    "name": "List custom privileged group(s)",
    "category": "Privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (g:Group {admincount:true, highvalue:false, domain: $result}) WHERE NOT (g.objectid =~ $domain_admins or g.objectid =~ $enterprise_admins or g.objectid =~ $administrators or g.objectid =~ $account_operators or g.objectid CONTAINS $replicators or g.objectid =~ $key_admins or g.objectid =~ $read_only_domain_controllers or g.objectid =~ $enterprise_key_admins or g.objectid =~ $schema_admins) RETURN g",
        "props": {
          "domain_admins": "(?i)S-1-5-.*-512",
          "enterprise_admins": "(?i)S-1-5-.*-519",
          "administrators": "(?i)S-1-5-.*-544",
          "account_operators": "(?i)S-1-5-.*-548",
          "replicators": "-552",
          "key_admins": "(?i)S-1-5-.*-526",
          "read_only_domain_controllers": "(?i)S-1-5-.*-521",
          "enterprise_key_admins": "(?i)S-1-5-.*-527",
          "schema_admins": "(?i)S-1-5-.*-518"
        }
      }
    ]
  },
  {
    "name": "List all enabled SVC account(s) with privileged group membership(s)",
    "category": "Privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=(u:User {enabled: true, hasspn: true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount: true}) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Route all privileged user(s) with sessions to non-privileged computer(s) [Required: sessions]",
    "category": "Privileged",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH (c:Computer), (u:User), (g:Group), (c)-[:MemberOf*1..]->(:Group {admincount:false}) MATCH p=(c)-[:HasSession]->(u {admincount:true, domain: $result}) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Find allshortestpaths with dangerous rights to AdminSDHolder object",
    "category": "Persistence",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[*]->(c:Container)) WHERE c.distinguishedname CONTAINS 'ADMINSDHOLDER' RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Find allshortestpaths with DCSync to domain object",
    "category": "Persistence",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[r:MemberOf|DCSync*1..]->(:Domain)) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "Find allshortestpaths with Shadow Credential permission to principal(s)",
    "category": "Persistence",
    "queryList": [
      {
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
      },
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((a {domain: $result})-[:MemberOf|AddKeyCredentialLink*1..]->(b)) WHERE NOT a=b RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "List all Tenancy (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (t:AZTenant) RETURN t",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] List all AAD Group(s) that are synchronized with AD (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] List all principal(s) used for syncing AD and AAD",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (u) WHERE (u:User OR u:AZUser) AND (u.name =~ '(?i)^MSOL_|.*AADConnect.*' OR u.userprincipalname =~ '(?i)^sync_.*') OPTIONAL MATCH (u)-[:HasSession]->(s:Session) RETURN u, s",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "List all enabled Azure User(s) (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (u:AZUser {enabled:true}) RETURN u",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "List all enabled Azure User(s) Azure Group membership(s) (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH p=(azu:AZUser {enabled:true})-[MemberOf*1..]->(azg:AZGroup) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "[WIP] List all AD principal(s) with edge(s) to Azure principal(s) (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH p=(u:User)-[r:MemberOf|AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor*1..]->(n) WHERE u.objectid CONTAINS 'S-1-5-21' RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "[WIP] List all principal(s) with privileged access to Azure Tenancy (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
        "allowCollapse": false
      }
    ]
  },
  {
    "name": "[WIP] Route all principal(s) that have control permissions to Azure Application(s) running as Azure Service Principals (AzSP), and route from privileged ASP to Azure Tenancy (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[:MemberOf|AZOwns|AZAppAdmin*1..]->(azapp:AZApp) OPTIONAL MATCH p2=(azapp)-[:AZRunsAs]->(azsp:AZServicePrincipal) OPTION MATCH p3=(azsp)-[:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p, p2, p3",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Route all user principal(s) that have control permissions to Azure Service Principals (AzSP), and route from AzSP to principal(s) (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((a)-[*]->(azsp:AZServicePrincipal)-[*]->(b)) WHERE NOT a=b RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Route from Azure User principal(s) that have dangerous rights to Azure User and User principal(s) (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((u:AZUser)-[*]->(a)) WHERE NOT a=u RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Route from principal(s) to Azure VM (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH p=allshortestpaths((a)-[*]->(vm:AZVM)) WHERE NOT a=vm RETURN p",
        "allowCollapse": true
      }
    ]
  },
  {
    "name": "[WIP] Route from principal(s) to principal(s) with Global Administrator permissions (Required: azurehound)",
    "category": "AAD",
    "queryList": [
      {
        "final": true,
        "query": "MATCH p=(ga)-[:AZGlobalAdmin|AZPrivilegedAdminRole*1..]->(:AZTenant) WHERE (ga:User OR ga:AZUser) WITH ga MATCH p=allshortestpaths((a)-[*]->(ga)) WHERE NOT a=ga RETURN p",
        "allowCollapse": true
      }
    ]
  }
]}
