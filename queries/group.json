[{
    "name": "Group: View all",
    "category": "Group Metadata",
    "queryList": [{
        "final": true,
        "query": "Match (g:Group) RETURN g"
    }]
},{
    "name": "Group: Find all 'Domain Users' Group memberships",
    "category": "Group Metadata",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: Find all 'AUTHENTICATED USERS' Group memberships",
    "category": "Group Metadata",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: Find all groups with description to network shares",
    "category": "Group Metadata",
    "requireNodeSelect": true,
    "queryList": [{
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
    },{
        "final": true,
        "query": "MATCH (g:Group {domain:$result}) where (any(prop in keys(g) where g[prop] contains '\\\\')) return g"
    }]
},{
    "name": "Group: Find all groups with description to non-SYSVOL network shares",
    "category": "Group Metadata",
    "requireNodeSelect": true,
    "queryList": [{
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
    },{
        "final": true,
        "query": "MATCH (g:Group {domain:$result}) where (any(prop in keys(g) where g[prop] contains '\\\\' and not g[prop] contains 'SYSVOL')) return g"
    }]
},{
    "name": "Group: List 'Domain Users' group membership paths Dangerous Rights to user node",
    "category": "Domain User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'Domain Users' group membership paths Dangerous Rights to enabled user node",
    "category": "Domain User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User {enabled:true}) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'Domain Users' group membership paths Dangerous Rights to group node",
    "category": "Domain User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(g3:Group) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'Domain Users' group membership paths Dangerous Rights to computer node",
    "category": "Domain User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(c:Computer) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: [DANGEROUS!!!] List 'Domain User' group membership paths Dangerous Rights to any node type",
    "category": "Domain User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer), (u1:User), (g:Group), (gp:GPO), (co:Container), (ou:OU) WITH collect([c, u1, g, gp, co, ou]) AS t WITH t AS results UNWIND results AS results_2 UNWIND results_2 AS result MATCH p=(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo]->(result) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p"
    }]
},{
    "name": "Group: List 'AUTHENTICATED USERS' group membership paths Dangerous Rights to user node",
    "category": "Authenticated User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'AUTHENTICATED USERS' group membership paths Dangerous Rights to enabled user node",
    "category": "Authenticated User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User {enabled:true}) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'AUTHENTICATED USERS' group membership paths Dangerous Rights to group node",
    "category": "Authenticated User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(g3:Group) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List 'AUTHENTICATED USERS' group membership paths Dangerous Rights to computer node",
    "category": "Authenticated User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(c:Computer) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: [DANGEROUS!!!] List 'AUTHENTICATED USERS' group membership paths Dangerous Rights to any node type",
    "category": "Authenticated User Group",
    "queryList": [{
        "final": true,
        "query": "MATCH (c:Computer), (u1:User), (g:Group), (gp:GPO), (co:Container), (ou:OU) WITH collect([c, u1, g, gp, co, ou]) AS t WITH t AS results UNWIND results AS results_2 UNWIND results_2 AS result MATCH p=(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo]->(result) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p"
    }]
},{
    "name": "Group: List all groups with 'Local Admin' rights, any active sessions",
    "category": "Group",
    "requireNodeSelect": true,
    "queryList": [{
        "final": false,
        "title": "Select source domain",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
    },{
        "final": true,
        "query": "MATCH p=(m:Group {domain:$result})-[r:AdminTo]->(n:Computer)<-[r2:HasSession]-(:User)-[:MemberOf*1..]->(:Group) RETURN p ORDER BY m.name"
        }]
},{
    "name": "Group: List all group membership paths Dangerous Rights to user node",
    "category": "Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User) RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List all group membership paths Dangerous Rights to enabled user node",
    "category": "Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u:User {enabled:true}) RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List all group membership paths Dangerous Rights to group node",
    "category": "Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(g3:Group) RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: List all group membership paths Dangerous Rights to computer node",
    "category": "Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)-[:MemberOf*1..]->(g2:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(c:Computer)RETURN p ORDER BY g2.name"
    }]
},{
    "name": "Group: [NT][TBC] route to AAD:AZGlobalAdmin",
    "category": "Group",
    "queryList": [{
        "final": true,
        "query": "MATCH (m:Group) WHERE m.enabled=TRUE WITH m MATCH p=(m)-[:AZGlobalAdmin|AZPrivilegedAdminRole*1..]->(n) RETURN p"
    }]
},{
    "name": "Group: Route all enabled users with non-privileged group membership has dangerous rights over user",
    "category": "Non-privileged Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(u1:User {enabled:true})-[:MemberOf*1..]->(g1:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(u2:User) WHERE NOT u1 = u2 AND NOT (g1.objectid =~ $domain_admins or g1.objectid =~ $enterprise_admins or g1.objectid =~ $administrators or g1.objectid =~ $account_operators) RETURN p",
        "props": {
            "domain_admins": "(?i)S-1-5-.*-512",
            "enterprise_admins": "(?i)S-1-5-.*-519",
            "administrators": "(?i)S-1-5-.*-544",
            "account_operators": "(?i)S-1-5-.*-548"
        }
    }]
},{
    "name": "Group: Route all enabled users with non-privileged group membership has dangerous rights over group",
    "category": "Non-privileged Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(u1:User {enabled:true})-[:MemberOf*1..]->(g1:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(:Group) WHERE NOT (g1.objectid =~ $domain_admins or g1.objectid =~ $enterprise_admins or g1.objectid =~ $administrators or g1.objectid =~ $account_operators) RETURN p",
        "props": {
            "domain_admins": "(?i)S-1-5-.*-512",
            "enterprise_admins": "(?i)S-1-5-.*-519",
            "administrators": "(?i)S-1-5-.*-544",
            "account_operators": "(?i)S-1-5-.*-548"
        }
    }]
},{
    "name": "Group: Route all enabled users with non-privileged group membership has dangerous rights over computer",
    "category": "Non-privileged Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(u1:User {enabled:true})-[:MemberOf*1..]->(g1:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(:Computer) WHERE NOT (g1.objectid =~ $domain_admins or g1.objectid =~ $enterprise_admins or g1.objectid =~ $administrators or g1.objectid =~ $account_operators) RETURN p",
        "props": {
            "domain_admins": "(?i)S-1-5-.*-512",
            "enterprise_admins": "(?i)S-1-5-.*-519",
            "administrators": "(?i)S-1-5-.*-544",
            "account_operators": "(?i)S-1-5-.*-548"
        }
    }]
},{
    "name": "Group: Find all enabled SVC accounts with privileged group membership",
    "category": "Privileged Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true})<-[:HasSession]-(c:Computer) WHERE (g1.objectid =~ $domain_admins OR g1.objectid =~ $enterprise_admins OR g1.objectid =~ $administrators OR g1.objectid =~ $account_operators) AND u.name CONTAINS 'svc' RETURN p ORDER BY c.name",
        "props": {
            "domain_admins": "(?i)S-1-5-.*-512",
            "enterprise_admins": "(?i)S-1-5-.*-519",
            "administrators": "(?i)S-1-5-.*-544",
            "account_operators": "(?i)S-1-5-.*-548"
        }
    }]
},{
    "name": "Group: Find all computer sessions of enabled users with privileged group membership",
    "category": "Privileged Group",
    "queryList": [{
        "final": true,
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true})<-[:HasSession]-(c:Computer) WHERE (g1.objectid =~ $domain_admins OR g1.objectid =~ $enterprise_admins OR g1.objectid =~ $administrators OR g1.objectid =~ $account_operators) RETURN p ORDER BY c.name",
        "props": {
            "domain_admins": "-512",
            "enterprise_admins": "-519",
            "administrators": "-544",
            "account_operators": "-548"
        }
    }]
}]
